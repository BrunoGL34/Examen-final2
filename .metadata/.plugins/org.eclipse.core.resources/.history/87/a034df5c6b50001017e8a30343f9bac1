package com.ex.ClientesMS.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import com.ex.ClientesMS.Dominio.Cliente;
import com.ex.ClientesMS.Entidad.MascotaDTO;
import com.ex.ClientesMS.FeignClients.IMascotaClient;
import com.ex.ClientesMS.Service.ClienteServiceImp;

@RestController
@RequestMapping("/cliente")
public class ClienteWS {

    @Autowired
    ClienteServiceImp service;
    @Autowired
    private IMascotaClient mascotaClient;

    @GetMapping("listar")
    public ResponseEntity<?> listar() {
        List<Cliente> lista = service.listar();
        return lista.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(lista);
    }

    @PostMapping("guardar")
    public ResponseEntity<?> guardarCliente(@RequestBody Cliente cliente) {
        if (cliente.getNombre() == null || cliente.getNombre().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("El nombre del cliente no puede estar vacío.");
        }

        if (cliente.getApellido() == null || cliente.getApellido().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("El apellido del cliente no puede estar vacío.");
        }

        if (cliente.getTelefono() == null || cliente.getTelefono().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("El número de teléfono es obligatorio.");
        }

        Cliente nuevo = service.guardar(cliente);
        return ResponseEntity.ok(nuevo); // ✅ Devuelve objeto JSON
    }


    @PostMapping("editar")
    public ResponseEntity<?> editar(@RequestBody Cliente c) {
        Cliente existe = service.buscar(c.getIdCliente());
        return (existe == null) ? ResponseEntity.notFound().build() : ResponseEntity.ok(service.guardar(c));
    }

    @PostMapping("buscar")
    public ResponseEntity<?> buscar(@RequestParam int idCliente) {
        Cliente c = service.buscar(idCliente);
        return (c != null) ? ResponseEntity.ok(c)
                : ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body("{\"mensaje\":\"No existe un cliente con ID: " + idCliente + ".\"}");
    }

    @DeleteMapping("eliminar/{idCliente}")
    public ResponseEntity<?> eliminar(@PathVariable int idCliente) {
        service.eliminar(idCliente);
        return ResponseEntity.noContent().build();
    }
    
    @GetMapping("/{id}/mascotas")
    public ResponseEntity<List<MascotaDTO>> obtenerMascotas(@PathVariable("id") int idCliente) {
        List<MascotaDTO> mascotas = mascotaClient.obtenerMascotasPorCliente(idCliente);
        return ResponseEntity.ok(mascotas);
    }
}
