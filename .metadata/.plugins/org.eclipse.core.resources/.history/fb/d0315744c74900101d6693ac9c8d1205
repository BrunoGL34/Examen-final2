package com.ex.MascotasMS.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import com.ex.MascotasMS.Dominio.Mascota;
import com.ex.MascotasMS.Service.MascotaServiceImp;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/mascota")
@Tag(name = "MASCOTA", description = "Microservicio para gestionar mascotas")
public class MascotaWS {

    @Autowired
    MascotaServiceImp service;

    @GetMapping("listar")
    @Operation(summary = "Lista todas las mascotas")
    public ResponseEntity<?> listar() {
        List<Mascota> lista = service.listar();
        return lista.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(lista);
    }

    @PostMapping("guardar")
    public ResponseEntity<?> guardar(@RequestBody Mascota m) {
        return ResponseEntity.status(HttpStatus.CREATED).body(service.guardar(m));
    }

    @PostMapping("editar")
    public ResponseEntity<?> editar(@RequestBody Mascota m) {
        Mascota existe = service.buscar(m.getIdMascota());
        return (existe == null) ? ResponseEntity.notFound().build() : ResponseEntity.ok(service.guardar(m));
    }

    @PostMapping("buscar")
    public ResponseEntity<?> buscar(@RequestParam int idMascota) {
        Mascota m = service.buscar(idMascota);
        return (m != null) ? ResponseEntity.ok(m)
                : ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body("{\"mensaje\":\"No existe una mascota con ID: " + idMascota + ".\"}");
    }

    @DeleteMapping("eliminar/{idMascota}")
    public ResponseEntity<?> eliminar(@PathVariable int idMascota) {
        service.eliminar(idMascota);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("cliente/{clienteId}")
    public ResponseEntity<?> porCliente(@PathVariable int clienteId) {
        List<Mascota> lista = service.porCliente(clienteId);
        return lista.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(lista);
    }

    @GetMapping("responsable/{responsableId}")
    public ResponseEntity<?> porResponsable(@PathVariable int responsableId) {
        List<Mascota> lista = service.porResponsable(responsableId);
        return lista.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(lista);
    }

    @GetMapping("veterinaria/{veterinariaId}")
    public ResponseEntity<?> porVeterinaria(@PathVariable int veterinariaId) {
        List<Mascota> lista = service.porVeterinaria(veterinariaId);
        return lista.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(lista);
    }
}

